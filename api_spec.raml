#%RAML 1.0
title: API Design Work Exercise
baseUri: http://api.workexercise.com/{version}
mediaType: application/json
protocols: HTTP
version: v0.1
documentation:
  - title: Work Exercise
    content: Felipe Caldas' API design for Deloitte.

types:
  Customer: !include libraries/Customer.dataType.raml

traits:
  pagination:
    queryParameters:
      offset:
        description: Skip over a number of elements by specifying an offset value for the query
        type: integer
        example: 20
        default: 0
      limit:
        description: Limit the number of elements on the response
        type: integer
        example: 80

resourceTypes:
  - base:
      get?: &common
        responses:
          200:
            headers: &commonHeaders
              x-ratelimit-limit:
                type: integer
              x-ratelimit-remaining:
                type: integer
              x-ratelimit-reset:
                type: integer
          400:
            headers: *commonHeaders
          404:
            headers: *commonHeaders
          429:
            description: |
                API rate limit exceeded.
            headers: *commonHeaders
      post?: *common
      patch?: *common
      put?: *common
      delete?: *common

/customer:
  get:
    description: List all customers
    responses:
      200:
        body:
          type: Customer[]
          example: !include examples/customers.json
      404:
        body:
          properties:
            error:
  /{customer_id}:
    description: A specific customer, identified by its id
    uriParameters:
      customer_id:
        type: number
        example: 1
    get:
      responses:
        200:
          body:
            type: Customer
            example: !include examples/customer.json
        404:
    put: #put is idempotent, so it is a good idea to implement this for {customer_id} to guarantee an object won't be inserted/updated twice.
      description: Update one particular customer
      body:
        type: Customer
    delete:
      description: Delete one particular customer
      responses:
        204:
  post:
    description: Creates one new customer
    body:
      type: Customer
    responses:
      201:
        body:
          properties:
